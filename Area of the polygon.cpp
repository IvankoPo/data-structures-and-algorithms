#include <vector>
#include <cmath>

struct point
{
    int x;
    int y;
    point(int x, int y)
    {
        this->x = x;
        this->y = y;
    }
};

int Area(std::vector<point> Point)
{
    int sum1;
    int sum2;
    int res;

    for (int i = 0; i < Point.size() - 1; i++){
        sum1+= Point[i].x * Point[i+1].y;
        sum2+= Point[i].y * Point[i+1].x;
    }
    res = sum1 - sum2;
    res /= 2;
    return res;
}

int main()
{
    std::vector<point> listPoint= {point(-3, -2), point(-1,4), point(6,1), point(3,10), point(-4,9), point(-3,-2)};
    std::cout << Area(listPoint);
    return 0;
}
/*
    Вычисление площади неправильного многоугольника - известны координаты вершин
    Шаг 1. Сделайте таблицу. Запишите координаты вершин (х,у)
           (вершины выбирать последовательно в направлении против часовой стрелки).
           В конце списка еще раз напишите координату первой вершины.
    Шаг 2. Умножьте значение координаты «х» первой вершины на значение координаты «у» второй вершины (и так далее).
           Сложите результаты.
    Шаг 3. Умножьте значение координаты «у» первый вершины на значение координаты «х» второй вершины (и так далее).
           Сложите результаты
    Шаг 4. Вычтите сумму, полученную в шаге 2, из суммы, полученной в шаге 3
    Шаг 5. Разделите полученный результат на 2, чтобы найти площадь многоугольника.
*/